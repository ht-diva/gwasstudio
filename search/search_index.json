{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to GWASStudio documentation","text":"<p>GWASStudio is a powerful CLI tool designed for efficient storage, retrieval, and querying of genomic summary statistics. It offers a high-performance infrastructure for handling and analyzing large-scale GWAS and QTL datasets, enabling seamless cross-dataset exploration.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>export</code> - Export summary statistics from the DB with various filtering options.</li> <li><code>info</code> - Show GWASStudio details</li> <li><code>ingest</code> - Ingest datasets into the DB.</li> <li><code>list</code> - List every category \u2192 project \u2192 study hierarchy stored in the metadata DB.</li> <li><code>meta-query</code> - Query the DB for specific records.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Set up the GWASStudio CLI on your system.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>This short overview of GWASStudio will help you get started.</p>"},{"location":"#examples","title":"Examples","text":"<p>Showcase GWASStudio's common workflows by using examples.</p>"},{"location":"#projects","title":"Projects","text":"<p>Overview of GWASStudio projects.</p>"},{"location":"commands/","title":"Commands usage","text":""},{"location":"commands/#commands","title":"Commands","text":""},{"location":"commands/#export","title":"<code>export</code>","text":"<p>Export summary statistics from TileDB datasets with various filtering options.</p> <p>Usage:</p> <pre><code>gwasstudio export [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--uri TEXT</code>: URI of the TileDB dataset.</li> <li><code>--output-prefix TEXT</code>: Prefix for naming output files (default: <code>out</code>).</li> <li><code>--output-format [parquet|csv.gz|csv]</code>: Output file format (default: <code>csv.gz</code>).</li> <li><code>--search-file TEXT</code>: Input file for querying metadata (required).</li> <li><code>--attr TEXT</code>: String delimited by comma with the attributes to export (default: <code>BETA,SE,EAF,MLOG10P</code>).</li> </ul> <p>Locusbreaker Options:</p> <ul> <li><code>--locusbreaker</code>: Option to run locusbreaker (flag).</li> <li><code>--pvalue-sig FLOAT</code>: Maximum log p-value threshold within the window (default: <code>5.0</code>).</li> <li><code>--pvalue-limit FLOAT</code>: Log p-value threshold for loci borders (default: <code>3.3</code>).</li> <li><code>--hole-size INTEGER</code>: Minimum pair-base distance between SNPs in different loci (default: <code>250000</code>).</li> </ul> <p>SNP ID List Filtering Options:</p> <ul> <li><code>--snp-list-file TEXT</code>: A txt file which must include CHR and POS columns.</li> </ul> <p>Plotting Options:</p> <ul> <li><code>--plot-out</code>: Boolean to plot results. If enabled, the output will be plotted as a Manhattan plot (flag).</li> <li><code>--color-thr TEXT</code>: Color for the points passing the threshold line in the plot (default: <code>red</code>).</li> <li><code>--s-value INTEGER</code>: Value for the suggestive p-value line in the plot (default: <code>5</code>).</li> </ul> <p>Regions Filtering Options:</p> <ul> <li><code>--get-regions TEXT</code>: Bed file with regions to filter.</li> <li><code>--maf FLOAT</code>: MAF filter to apply to each region (default: <code>0.01</code>).</li> <li><code>--phenovar</code>: Boolean to compute phenovariance (Work in progress, not fully implemented yet) (flag).</li> <li><code>--nest</code>: Estimate effective population size (Work in progress, not fully implemented yet) (flag).</li> </ul>"},{"location":"commands/#info","title":"<code>info</code>","text":"<p>Show GWASStudio details</p> <p>Usage:</p> <pre><code>gwasstudio info\n</code></pre>"},{"location":"commands/#ingest","title":"<code>ingest</code>","text":"<p>Ingest data in TileDB datasets.</p> <p>Usage:</p> <pre><code>gwasstudio ingest [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--file-path TEXT</code>: Path to the tabular file containing details for the ingestion (required).</li> <li><code>--delimiter TEXT</code>: Character or regex pattern to treat as the delimiter (default: <code>\\t</code>).</li> <li><code>--uri TEXT</code>: Destination path where to store the tiledb dataset. The prefix can be <code>s3://</code> or <code>file://</code> (required).</li> <li><code>--ingestion-type [metadata|data|both]</code>: Choose between metadata ingestion, data ingestion, or both (default: <code>both</code>).</li> <li><code>--pvalue</code>: Indicate whether to ingest the p-value from the summary statistics instead of calculating it (default: <code>True</code>).</li> </ul>"},{"location":"commands/#list","title":"<code>list</code>","text":"<p>List every category \u2192 project \u2192 study hierarchy stored in the metadata DB</p> <p>Usage:</p> <pre><code>gwasstudio list\n</code></pre>"},{"location":"commands/#meta-query","title":"<code>meta-query</code>","text":"<p>Query metadata records from MongoDB</p> <p>Usage:</p> <pre><code>gwasstudio meta-query [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--search-file</code>: The search file used for querying metadata  [required]</li> <li><code>--output-prefix</code>: Prefix to be used for naming the output files</li> <li><code>--case-sensitive</code>: Enable case sensitive search</li> </ul>"},{"location":"configuration/","title":"GWASStudio: Configuration","text":"<p>How to configure access to the diverse components used by GWASStudio.</p>"},{"location":"examples/","title":"Examples","text":"<p>The following examples assume you have already set up the GWASStudio CLI.</p>"},{"location":"examples/#retrieving-the-full-list-of-trait-descriptions-from-a-study","title":"Retrieving the full list of trait descriptions from a study","text":"<p>In this example, we retrieve every trait descriptions from a specific project/study. The chosen study is \"believe\", which belongs to the \"pqtl\" project.</p> <p>First, let's create a query file named <code>search_believe.yml</code> containing the following:</p> <pre><code>project: pqtl\nstudy: believe\n\noutput:\n  - trait.desc\n</code></pre> <p>In the YAML file, we have specified the project and study that we want to query, as well as the field that we want in the output.</p> <p>Then, we can run the query using the following command:</p> <pre><code>gwasstudio meta-query --search-file search_believe.yml\n</code></pre> <p>You\u2019ll see a log similar to:</p> <pre><code>2025-10-08 15:59:56.294 | INFO     | Gwasstudio started\n2025-10-08 15:59:56.295 | INFO     | Processing search_believe.yml\n2025-10-08 15:59:57.013 | INFO     | 7244 results found. Writing to out_meta.csv\n</code></pre> <p>The command reads the YAML file, queries the metadata database, and writes the results to <code>out_meta.csv</code> in the current directory. Use <code>--output-prefix &lt;prefix&gt;</code> to change the output file\u2019s prefix.</p>"},{"location":"examples/#filtering-a-study-by-snps-on-some-traits-pqtl-study","title":"Filtering a study by SNPs on some traits - pQTL study","text":"<p>This example shows how to filter a study by a list of SNPs and retrieve the corresponding summary statistics.</p> <p>The chosen study is \"believe\", which belongs to the \"pqtl\" project.</p> <p>First, let's create a query file named <code>search_believe.yml</code> containing the following:</p> <pre><code>project: pqtl\nstudy: believe\n\ntrait:\n  - seqid: 10000-28\n  - seqid: 7059-14\n  - seqid: 9995-6\n\noutput:\n  - build\n  - notes.sex\n  - notes.source_id\n  - trait.desc\n  - total.samples\n</code></pre> <p>In the YAML file, we have specified the project and study that we want to query, as well as some specific seqid traits.</p> <p>The <code>trait</code> block limits the export to the specified <code>seqid</code> traits.</p> <p>Secondly, we need a list of SNPs that we use for filtering the data. We can create a file named <code>snp_list.txt</code> containing the following:</p> <pre><code>CHR,POS\n4,29721067\n5,157004314\n6,167099480\n7,31837152\n7,140838327\n8,131244697\n10,25816112\n11,11521474\n12,70397835\n21,43962980\n</code></pre> <p>Then, we can run the <code>export</code> using the following command:</p> <pre><code>gwasstudio export --search-file search_believe.yml --snp-list-file snp_list.txt\n</code></pre> <p>Sample log output:</p> <pre><code>2025-10-08 17:05:50.707 | INFO     | Gwasstudio started\n2025-10-08 17:05:50.737 | INFO     | Processing search_believe.yml\n2025-10-08 17:05:51.488 | INFO     | 3 results found. Writing to out_meta.csv\n2025-10-08 17:05:53.877 | INFO     | Dask local cluster: starting 2 workers, with 4GiB of memory and 2 cpus per worker\n2025-10-08 17:05:53.877 | INFO     | Dask cluster dashboard: http://127.0.0.1:8787/status\n2025-10-08 17:05:53.889 | INFO     | Processing the group pqtl_believe\n2025-10-08 17:05:53.890 | INFO     | Running batch 1/1 (4 items)\n2025-10-08 17:06:55.436 | INFO     | Batch 1 completed.\n2025-10-08 17:06:55.437 | INFO     | Shutting down Dask client and cluster.\n</code></pre> <p>The resulting summary\u2011statistics tables are written to the current directory. Again, you can change the output file prefix with <code>--output-prefix</code> . <p>Below is an extract from one of the output files:</p> <pre><code>CHR,POS,BETA,SE,EAF,MLOG10P\n1,39601,0.366391,0.184071,0.00157335,1.332199\n1,39743,-0.366391,0.184071,0.9984267,1.332199\n1,71693,0.373316,0.28592,0.00065104,0.717454\n1,80105,-0.598303,0.29858,0.00059679,1.345934\n1,87048,-0.012436,0.165307,0.9980469,0.026857\n1,138822,0.177862,0.211292,0.00119358,0.398038\n1,288442,0.239477,0.350127,0.99956596,0.306279\n1,462070,-0.380496,0.274715,0.0007053,0.7798\n1,598941,0.0593,0.054005,0.018826,0.565126\n\n</code></pre>"},{"location":"examples/#filtering-a-study-by-snps-on-some-traits-gwas-study","title":"Filtering a study by SNPs on some traits - GWAS study","text":"<p>This example shows how to filter a study by a list of SNPs and retrieve the corresponding summary statistics.</p> <p>The chosen study is \"ukb-d\", which belongs to the \"opengwas\" project.</p> <p>First, let's create a query file named <code>search_ukb.yml</code> containing the following:</p> <pre><code>project: opengwas\nstudy: ukb-d\n\ntrait:\n  - desc: heart failure\n\noutput:\n  - build\n  - notes.sex\n  - notes.source_id\n  - total.samples\n  - total.cases\n  - total.controls\n  - trait.desc\n</code></pre> <p>By default, GWASStudio performs a case-insensitive substring search of the trait description. This query matches four traits that contain 'heart failure' anywhere in the description.</p> <p>Secondly, we need a list of SNPs that we use for filtering the data. We can create a file named <code>snp_list.txt</code> containing the following:</p> <pre><code>CHR,POS\n4,29721067\n5,157004314\n6,167099480\n7,31837152\n7,140838327\n8,131244697\n10,25816112\n11,11521474\n12,70397835\n21,43962980\n</code></pre> <p>Then, we can run the <code>export</code> using the following command:</p> <pre><code>gwasstudio export --search-file search_ukb.yml --snp-list-file snp_list.txt\n</code></pre> <p>Log snippet:</p> <pre><code>2025-10-08 18:35:36.884 | INFO     | Gwasstudio started\n2025-10-08 18:35:36.925 | INFO     | Processing search_ukb.yml\n2025-10-08 18:35:37.378 | INFO     | 4 results found. Writing to out_meta.csv\n2025-10-08 18:35:40.466 | INFO     | Dask local cluster: starting 2 workers, with 4GiB of memory and 2 cpus per worker\n2025-10-08 18:35:40.467 | INFO     | Dask cluster dashboard: http://127.0.0.1:8787/status\n2025-10-08 18:35:40.532 | INFO     | Processing the group opengwas_ukb-d\n2025-10-08 18:35:40.534 | INFO     | Running batch 1/1 (4 items)\n2025-10-08 18:36:04.388 | INFO     | Batch 1 completed.\n2025-10-08 18:36:04.389 | INFO     | Shutting down Dask client and cluster.\n</code></pre> <p>Results are written to the current directory; use <code>--output\u2011prefix</code> to customise the filename.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This short overview of GWASStudio will help you get started.</p>"},{"location":"getting-started/#usage-on-the-ht-hpc","title":"Usage on the HT-HPC","text":"<p>To use GWASStudio on the HT computing cluster, simply type:</p> <pre><code>source /exchange/healthds/singularity_functions\n</code></pre> <p>Verify with:</p> <pre><code>gwasstudio --version\n</code></pre>"},{"location":"getting-started/#vault-token","title":"Vault token","text":"<p>To securely access (meta)data according to your user permissions, you will be provided with a vault token.</p> <p>To authenticate automatically, please save your token in the following file:</p> <pre><code>${HOME}/.vault-token\n</code></pre> <p>NOTE:</p> <ul> <li>The vault token is personal and confidential. Do not share it with other users</li> <li>If <code>${HOME}/.vault-token</code> is missing, you will be prompted to manually paste the token during commmand execution</li> </ul>"},{"location":"getting-started/#main-commands","title":"Main commands","text":"<p>GWASStudio has three main commands for users:</p> <ul> <li>list: list available/accessible data</li> <li>meta-query: query metadata of interest</li> <li>export: export data of interest</li> </ul>"},{"location":"getting-started/#1-list","title":"1. <code>list</code>","text":"<p>The <code>list</code> command is used to display all summary statistics available on MongoDB, based on your access permissions (see vault token) as category \u2192 project \u2192 study.</p>"},{"location":"getting-started/#list-example","title":"List example","text":"<pre><code>gwasstudio list\n</code></pre>"},{"location":"getting-started/#list-output-example","title":"List output example","text":"<pre><code>Category: GWAS\n  Project: opengwas\n        Studies: ukb-a, ukb-b, ukb-d\n</code></pre>"},{"location":"getting-started/#2-meta-query","title":"2. <code>meta-query</code>","text":"<p>The <code>meta-query</code> command retrieves metadata of interest using a query file. It can be used to verify the availability and characteristics of the data to export.</p>"},{"location":"getting-started/#meta-query-example","title":"Meta-query example","text":"<pre><code>gwasstudio meta-query --search-file query_ex01.txt --output-prefix output_query_ex01\n</code></pre> <p>The output is a metadata table named output_query_ex01.csv with records filtered by the query file query_ex01.txt.</p> <p>For a detailed explanation of all command options, see also meta-query command.</p>"},{"location":"getting-started/#metadata","title":"Metadata","text":"<p>A metadata table is assigned to each project-study and describes key information about the available/accessible summary statistics. Metadata records may contain the following fields:</p> Metadata field Description Possible values <code>category</code> The type of summary statistics GWAS, pQTL, eQTL <code>project</code> Project to which the data belongs opengwas, pqtl, genesandhealth, ... <code>study</code> The study under which the summary statistics fall ukb-a, ukb-b,  ukb-d, ... <code>data_id</code> Unique ID for a summary statistics record e.g. 89f31189b3 <code>build</code> Genome build GRCh37, GRCh38 <code>population</code> Ancestry of the cohort see the ancestry categories page <code>total.samples</code> Total sample size integer <code>total.cases</code> Total amount of cases integer <code>total.controls</code> Total amount of controls integer <code>trait.desc</code> A description of the trait (e.g. phenotypes or protein) associated to the summary statistics record e.g. \"Pregnancy, childbirth and the puerperium\", \"Alpha-1B-glycoprotein\" ... <code>notes.sex</code> The sex of the individuals that participated to the study Males and Females, Combined <p>For a more detailed description of the metadata fields, please refer to the metadata records page.</p>"},{"location":"getting-started/#query-file","title":"Query file","text":"<p>The query file used to retrieve (meta)data follows a structured format with two sections:</p> <ul> <li>Filtering criteria: metadata fields used to query the database, specified as <code>metadata field: filtering value</code> pairs</li> <li>Output specification (<code>output:</code>): a list of valid metadata fields to include in the output</li> </ul>"},{"location":"getting-started/#query-file-example","title":"Query file example","text":"<pre><code>project: opengwas\nstudy: ukb-d\ncategory: GWAS\n\ntrait:\n  - desc: Z42\n  - desc: pregnancy\n\noutput:\n  - build\n  - population\n  - notes.sex\n  - notes.source_id\n  - total.samples\n  - total.cases\n  - total.controls\n  - trait.desc\n</code></pre> <p>This query file searches within the <code>ukb-d</code> study for all trait descriptions containing <code>Z42</code> or <code>pregnancy</code>, and returns a table with the columns specified in section <code>output:</code>.</p> <p>NOTES:</p> <ul> <li>Filtering values can include partial matches  (e.g. trait descriptions containing <code>Z42</code> or <code>pregnancy</code>)</li> <li>Filtering values are processed by lowercasing and replacing special characters before being used to query the database</li> <li>It is possible to query across different projects and studies by not specifiyng <code>project</code> and <code>study</code> in the query file</li> </ul>"},{"location":"getting-started/#meta-query-output-example","title":"Meta-query output example","text":"project study category data_id build population notes_sex notes_source_id total_samples total_cases total_controls trait_desc opengwas ukb-d GWAS 47e96deafe GRCh38 European Males and Females ukb-d-XV_PREGNANCY_BIRTH 361194 11959 349235 \"Pregnancy,  childbirth and the puerperium\" opengwas ukb-d GWAS 531f0d4bcc GRCh38 European Males and Females ukb-d-Z42 361194 1963 359231 Diagnoses - main ICD10: Z42 Follow-up care involving plastic surgery opengwas ukb-d GWAS cc18ce8683 GRCh38 European Males and Females ukb-d-O26 361194 1289 359905 Diagnoses - main ICD10: O26 Maternal care for other conditions predominantly related to pregnancy"},{"location":"getting-started/#3-export","title":"3. <code>export</code>","text":"<p>The <code>export</code> command is used to extract records of summary statistics (and associated metadata) from TileDB as speficied in the query file.</p>"},{"location":"getting-started/#enter-compute-node","title":"Enter compute node","text":"<p>The <code>export</code> command is a computationally intensive operation. Therefore, it must be executed from a compute node.</p> <p>To enter a compute node, run the following command:</p> <pre><code>salloc --partition=cpu-interactive --nodes=1 --ntasks-per-node=2 --mem-per-cpu=2048M --time=12:00:00\n</code></pre>"},{"location":"getting-started/#full-stats","title":"Full stats","text":"<p>The <code>export</code> command, when used without any filtering options, will export the full set of summary statistics.</p> <pre><code>gwasstudio export --search-file query_ex01.txt\n</code></pre>"},{"location":"getting-started/#filtering-options","title":"Filtering options","text":"<p>Exports can also be performed with different filtering options.</p>"},{"location":"getting-started/#region-filtering","title":"Region filtering","text":"<p>Command example to export data by filtering regions provided in <code>regions_query.tsv</code>:</p> <pre><code>gwasstudio export --search-file query_ex01.txt --get-regions regions_query.tsv\n</code></pre>"},{"location":"getting-started/#snp-filtering","title":"SNP filtering","text":"<p>Command example to export data by filtering SNPIDs listed in <code>hapmap3_snps.csv</code>:</p> <pre><code>gwasstudio export --search-file query_ex01.txt --snp-list-file hapmap3_snps.csv\n</code></pre>"},{"location":"getting-started/#locusbreaker","title":"Locusbreaker","text":"<p>Command example to export data with locusbreaker:</p> <pre><code>gwasstudio export --search-file query_ex01.txt --locusbreaker\n</code></pre> <p>For a detailed explanation of all command options, see also export command.</p>"},{"location":"installation/","title":"GWASStudio: Installation Guide","text":"<p>This guide will walk you through the installation process.</p>"},{"location":"installation/#installation-from-source","title":"Installation from source","text":"<p>You can install GWASStudio using either the <code>make</code> command (recommended for simplicity) or manually. Choose the method that best fits your workflow.</p>"},{"location":"installation/#1-installation-using-make-recommended","title":"1. Installation Using <code>make</code> (Recommended)","text":"<p>The <code>make</code> method automates most of the installation steps, making it easier and less error-prone.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Ensure you have <code>make</code> installed on your system.</li> <li>Ensure you have <code>conda</code> or <code>miniconda</code> installed for environment management.</li> </ul>"},{"location":"installation/#steps","title":"Steps","text":"<p>1. Clone the Repository</p> <p>Clone the repository to your local machine:</p> <pre><code>git clone https://github.com/ht-diva/gwasstudio.git\ncd gwasstudio\n</code></pre> <p>2. Create the Conda Environment</p> <p>Run the following command to create a dedicated conda environment for GWASStudio:</p> <pre><code>make create-env\n</code></pre> <p>This command reads the environment configuration from <code>base_environment.yml</code> and sets up a clean, isolated environment.</p> <p>3. Install Dependencies</p> <p>Install all required dependencies using:</p> <pre><code>make dependencies\n</code></pre> <p>This step ensures that all necessary Python packages and system libraries are installed.</p> <p>4. Install the Program</p> <p>Finally, install the program in your conda environment:</p> <pre><code>make install\n</code></pre> <p>This installs the program globally within your conda environment, making it available from the command line.</p>"},{"location":"installation/#2-manual-installation-without-make","title":"2. Manual Installation (Without <code>make</code>)","text":"<p>If you prefer not to use <code>make</code>, you can install GWASStudio manually. This method gives you more control over each step.</p>"},{"location":"installation/#prerequisites_1","title":"Prerequisites","text":"<ul> <li>Ensure you have <code>conda</code> or <code>miniconda</code> installed.</li> </ul>"},{"location":"installation/#steps_1","title":"Steps","text":"<p>1. Clone the Repository</p> <p>Clone the repository to your local machine:</p> <pre><code>git clone https://github.com/ht-diva/gwasstudio.git\ncd gwasstudio\n</code></pre> <p>1. Create the Conda Environment</p> <p>Create a new conda environment using the provided configuration file:</p> <pre><code>conda env create --file base_environment.yml\n</code></pre> <p>This command sets up a conda environment with all the base dependencies specified in <code>base_environment.yml</code>.</p> <p>2. Activate the Conda Environment</p> <p>Activate the environment with the following commands:</p> <pre><code>  conda activate gwasstudio\n</code></pre> <p>4. Install the program</p> <p>Use <code>poetry</code> to install the project dependencies (excluding development dependencies) and the program:</p> <pre><code>  poetry install --without dev\n</code></pre> <p>This installs gwasstudio in your active conda environment.</p>"},{"location":"metadata/","title":"Metadata records","text":"<p>Each project-study combination is associated with a metadata record that describes the key characteristics of the available summary-statistics file(s). These records are used throughout the platform (e.g., for filtering, querying, and API responses) and therefore follow a stable schema. When new attributes become relevant they should be added to this table and, if possible, given a concise, human-readable label.</p>"},{"location":"metadata/#core-metadata-fields","title":"Core metadata fields","text":"Field (canonical name) Friendly label Description Possible values / format <code>category</code> Summary-statistic type Type of summary statistics <code>GWAS</code>, <code>pQTL</code>, <code>eQTL</code>, \u2026 <code>project</code> Project Identifier of the project the data belongs to <code>opengwas</code>, <code>pqtl</code>, <code>genesandhealth</code>, \u2026 <code>study</code> Study Identifier of the specific study <code>ukb-a</code>, <code>ukb-b</code>, <code>ukb-d</code>, \u2026 <code>data_id</code> Record ID Unique identifier for the metadata entry e.g. <code>89f31189b3</code> <code>build</code> Genome build Reference genome build <code>GRCh37</code>, <code>GRCh38</code> <code>population</code> Broad ancestry category Ancestry of the cohort see the ancestry categories page <code>total_samples</code> Number of samples Sample size of the cohort integer <code>total_cases</code> Number of cases Count of case subjects (if applicable) integer <code>total_controls</code> Number of controls Count of control subjects (if applicable) integer <code>trait_desc</code> Trait description Human-readable description of the phenotype or protein e.g. \u201cPregnancy, childbirth and the puerperium\u201d, \u201cAlpha-1B-glycoprotein\u201d <code>notes_sex</code> Sex of participants Sex composition of the cohort <code>Males</code>, <code>Females</code>, <code>Combined</code>"},{"location":"metadata/#additional-optional-fields-may-appear-in-specific-projects","title":"Additional optional fields (may appear in specific projects)","text":"Field Friendly label When to use <code>notes_maker</code> Data producer Institution or consortium that generated the data <code>notes_maker_platform_technology</code> Assay technology Technology used to generate the data (e.g., array, sequencing) <code>notes_maker_platform_description</code> Assay description Provide extra detail beyond the technology name <code>notes_maker_platform_version</code> Assay version Useful when multiple releases exist <code>notes_maker_platform_normalization</code> Normalization strategy Clarifies how raw data were transformed <code>notes_software_description</code> Analysis software Record the tool that generated the statistics <code>notes_source_id</code> Source ID Original identifier of the upstream summary\u2011statistics file <code>trait_gene_ids</code> Gene identifiers When multiple genes are linked to the trait <code>trait_icd10</code> Clinical code When the trait is a disease phenotype <code>trait_protein_ids</code> Protein identifiers For proteomics\u2011related summary statistics <code>trait_seqid</code> Sequence identifier SomaLogic specific sequence identifier for the trait <code>trait_tissue</code> Measured tissue eQTL/pQTL studies that are tissue\u2011specific <code>trait_unit</code> Measurement unit For quantitative traits (e.g., blood pressure)"},{"location":"population/","title":"Ancestry categories","text":"<p>The GWAS\u2011Studio platform uses a standardised list of ancestry (population) categories. Each category has a short, machine\u2011friendly code (the shortcut) that can be stored in the database or used in API calls, while the full description is shown to users.</p>"},{"location":"population/#ancestry-shortcut-table","title":"Ancestry shortcut table","text":"Shortcut Full description AUS Aboriginal Australian AFA African American or Afro\u2011Caribbean AFR African unspecified ASN Asian unspecified CAS Central Asian EAS East Asian EUR European MDE Greater Middle Eastern (Middle Eastern, North African, or Persian) AMR Hispanic or Latin American ISL Icelandic NR Not reported / unknown NAM Native American OCE Oceanian OTH Other ADM Other admixed ancestry SAS South Asian SEA South East Asian SAF Sub\u2011Saharan African"},{"location":"population/#how-to-use-the-table","title":"How to use the table","text":"<ul> <li>Database / API \u2013 store the shortcut (e.g., <code>EUR</code>) and map it to the full description when presenting data to users.</li> <li>User interfaces \u2013 show the full description in dropdowns or tooltips; the shortcut can be used for filtering or as a compact label.</li> <li>Validation \u2013 accept either the shortcut or the full description, then normalise to the shortcut for internal consistency.</li> </ul> <p>The list is version\u2011controlled; any addition or change should be reflected both in <code>src/gwasstudio/config/config.yaml</code> (under <code>ancestry_groups</code>) and in this documentation.</p> <p>Source: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5815218/table/Tab1/?report=objectonly</p>"},{"location":"projects/","title":"Projects","text":"<p>This is an overview of the GWASStudio projects available on-premises at Human Tecnopole, along with the relevant core metadata fields (see metadata.md#core-metadata-fields).</p> <p>Note: All summary statistics were harmonized to the GWASLab format via harmonization_pipeline.</p> Project name <code>category</code> <code>project</code> <code>study</code> deCODE <code>pQTL</code> <code>DECODE</code> <code>large scale plasma 2023</code> FinnGen <code>GWAS</code> <code>finngen</code> <code>R12</code> Genes &amp; Health <code>GWAS</code> <code>genesandhealth</code> <code>v010_binary_traits_3digitICD10</code>, <code>v010_quantitative_traits_median_values</code> UKB <code>GWAS</code> <code>opengwas</code> <code>ukb-a</code>, <code>ukb-b</code>, <code>ukb-d</code> UKB-PPP <code>pQTL</code> <code>ukb-ppp_consortium</code> <code>ukb-ppp_African</code>, <code>ukb-ppp_American</code>, <code>ukb-ppp_Combined</code>, <code>ukb-ppp_East_Asian</code>, <code>ukb-ppp_European</code>, <code>ukb-ppp_Middle_Eastern</code>, <code>ukb-ppp_South_Asian</code>"},{"location":"projects/#decode","title":"deCODE","text":"<p>The deCODE project is a large-scale population genetics initiative that integrates medical and genetic data from over 160,000 Icelandic participants. This includes genotype information, whole-genome sequencing, quantitative traits, binary disease phenotypes, and extensive genealogical records. Through global collaborations with medical institutions, deCODE has also incorporated data from ~500,000 individuals worldwide. A primary goal is to identify genetic risk factors for common diseases (e.g., heart attack, asthma, stroke, and cancer) and to advance personalized medicine.</p> <p>GWASStudio includes 5,284 summary statistics from the large-scale plasma proteomics GWAS conducted by deCODE.</p> <p>For more information on the deCODE Project, see the deCODE genetics Inc. article.</p> <p>For details on the plasma proteomics GWAS, see the original article and the 2023 follow-up study that integrates results with data from UKB-PPP: UKB-deCODE comparative analysis.</p>"},{"location":"projects/#key-metadata","title":"Key Metadata","text":"<ul> <li>Number of Protein Analytes<ul> <li>4,907 aptamers (measuring 4,719 proteins)</li> </ul> </li> <li>Protein Platform<ul> <li>SomaScan multiplex aptamer assay (version 4)</li> </ul> </li> <li>Number of Variants<ul> <li>~27.2 million imputed variants</li> </ul> </li> <li>Imputation Panel<ul> <li>Whole-genome sequencing (WGS on ~60,000 Icelanders) used as population-specific reference panel for genotype imputation into the larger Icelandic cohort (~160,000 individuals)</li> </ul> </li> <li>Genome build<ul> <li>GRCh38</li> </ul> </li> <li>Sample Size and Ancestry<ul> <li>~36,000 Icelandic individuals (i.e. primarily Icelandic and European ancestry)</li> </ul> </li> <li>GWAS Method<ul> <li>linear mixed model (BOLT-LMM)</li> </ul> </li> </ul> <p>Note: For detailed GWAS methodology, see the original article.</p>"},{"location":"projects/#finngen","title":"FinnGen","text":"<p>FinnGen is a large-scale research initiative that integrates genomic data with national health registry data from 500,000 Finnish biobank participants. The project aims to identify genetic risk factors for disease, understand disease progression and treatment response, and advance personalized medicine.</p> <p>GWASStudio includes 2,469 summary statistics from the FinnGen GWAS R12 analysis.</p> <p>For more information on the FinnGen Project and methods, see the FinnGen documentation and FinnGen Handbook.</p> <p>To browse FinnGen traits (including trait definition, prevalence, and longitudinal comorbidities), see the Risteys portal.</p>"},{"location":"projects/#key-metadata_1","title":"Key Metadata","text":"<ul> <li>Number of Traits<ul> <li>2,469</li> </ul> </li> <li>Trait Types<ul> <li>2,466 binary traits</li> <li>3 quantitative traits (<code>HEIGHT_IRN</code>, <code>WEIGHT_IRN</code>, <code>BMI_IRN</code>)</li> </ul> </li> <li>Number of Variants<ul> <li>~21 million imputed variants</li> </ul> </li> <li>Imputation Panel<ul> <li>Sisu v4.2 reference panel (Finnish-specific reference panel combining high-coverage WGS and WES)</li> </ul> </li> <li>Genome build<ul> <li>GRCh38</li> </ul> </li> <li>Sample Size and Ancestry<ul> <li>500,348 individuals of primarily Finnish/European ancestry</li> </ul> </li> <li>GWAS Method<ul> <li>regenie v2.2.4 (v3.3 used for traits not converging under v2.2.4)</li> </ul> </li> </ul> <p>Note: For detailed GWAS methodology, see the FinnGen documentation.</p>"},{"location":"projects/#genes-health","title":"Genes &amp; Health","text":"<p>Genes &amp; Health is a community\u2011based genetic research initiative, focusing on British Bangladeshi and British Pakistani communities, with over 100,000 participants. The project aims to reduce health disparities in these groups (e.g. in diabetes, cardiovascular diseases, and mental health disorders) by researching genetic risk factors, disease progression, treatment response, and supporting more inclusive precision medicine.</p> <p>GWASStudio includes 762 binary\u2011trait summary statistics and 107 quantitative\u2011trait summary statistics from Genes &amp; Health (2025 Realease).</p> <p>For more information on the Genes &amp; Health project, data access, and methods, see the Genes &amp; Health \"Data &amp; Researchers\" page and the project website.</p>"},{"location":"projects/#key-metadata_2","title":"Key Metadata","text":"<ul> <li>Number of Traits<ul> <li><code>v010_binary_traits_3digitICD10</code>: 762 binary traits</li> <li><code>v010_quantitative_traits_median_values</code>: 107 quantitative traits (median values)</li> </ul> </li> <li>Trait Types<ul> <li><code>v010_binary_traits_3digitICD10</code>: ICD10-coded binary traits (e.g. A01\u2013Q99)</li> <li><code>v010_quantitative_traits_median_values</code>: quantitative (e.g. BMI, LDL-cholesterol)</li> </ul> </li> <li>Number of Variants<ul> <li>~37.5 million imputed variants</li> </ul> </li> <li>Imputation Panel<ul> <li>TOPMed-r3</li> </ul> </li> <li>Genome build<ul> <li>GRCh38</li> </ul> </li> <li>Sample Size and Ancestry<ul> <li>~100,000 participants of British Bangladeshi and British Pakistani (South Asian) ancestry</li> </ul> </li> <li>GWAS Method<ul> <li>regenie</li> </ul> </li> </ul> <p>Note: For quantitative traits, Genes &amp; Health provides 321 quantitative\u2011trait summary statistics derived from minimum, median, and maximum observed values per individual. For consistency and to reduce variability caused by extreme measurements or outliers, median values were selected to represent each quantitative trait in the GWAS analyses included in GWASStudio.</p> <p>Note: For more information on the phenotypes and notation, see the dedicated page on the project website.</p>"},{"location":"projects/#uk-biobank-ukb","title":"UK Biobank (UKB)","text":"<p>UK Biobank (UKB) is a large-scale biomedical database and research resource containing detailed health, lifestyle, environmental, and genetic data from approximately 500,000 UK participants aged 40\u201369 at recruitment (2006\u20132010). Participants have been followed longitudinally through linked electronic health records, imaging, biomarker assays, and repeat assessments.</p> <p>A wide range of GWAS analyses have been conducted on UKB phenotypes by multiple research groups, often focusing on different trait types, QC pipelines, or analysis methods. GWASStudio includes results from three major sources, for a total of 3,945 UKB-based GWAS summary statistics:</p> <ul> <li><code>ukb-a</code>: Neale Lab Phase 1 Release (2017) \u2014 early GWAS on core phenotype (596)</li> <li><code>ukb-b</code>: MRC-IEU OpenGWAS project (2021+) \u2014 harmonized and quality-controlled GWAS across thousands of traits (2,514)</li> <li><code>ukb-d</code>: Neale Lab Phase 2/3 Release (2018) \u2014 expanded GWAS with improved imputation, additional phenotypes, and updated QC pipelines (835)</li> </ul> <p>For more information on the UK Biobank project, see https://www.ukbiobank.ac.uk/ and UKB Data Showcase, which provides searchable metadata on all available phenotypes and samples.</p>"},{"location":"projects/#key-metadata_3","title":"Key Metadata","text":"<ul> <li>Number of Traits<ul> <li><code>ukb-a</code>: 596</li> <li><code>ukb-b</code>: 2,514</li> <li><code>ukb-d</code>: 835</li> </ul> </li> <li>Trait Types<ul> <li><code>ukb-a</code> and <code>ukb-d</code>: binary (disease case-control), continuous (physical and lab measures)</li> <li><code>ukb-b</code>: binary, continuous, categorical ordered (e.g. job satisfaction)</li> </ul> </li> <li>Number of Variants<ul> <li>All studies begin with ~17 million imputed variants</li> <li><code>ukb-a</code>: filtered to ~10.5 million</li> <li><code>ukb-b</code>: filtered to ~10 million</li> <li><code>ukb-d</code>: filtered to ~13.5 million</li> </ul> </li> <li>Imputation Panel<ul> <li>UK Biobank Imputation Release v3 (R3)</li> </ul> </li> <li>Genome build<ul> <li>GRCh38 (lifted via GWASLab liftover method)</li> </ul> </li> <li>Sample Size and Ancestry<ul> <li><code>ukb-a</code>: ~337,000 unrelated White British individuals</li> <li><code>ukb-b</code>: ~460,000 full UKB cohort (mostly European), including related individuals</li> <li><code>ukb-d</code>: ~361,000 White British individuals, including related individuals</li> </ul> </li> <li>GWAS Method<ul> <li><code>ukb-a</code> and <code>ukb-d</code>: linear regression (Hail, <code>linreg3</code>)</li> <li><code>ukb-b</code>: linear mixed model (BOLT-LMM or SAIGE, depending on the trait)</li> </ul> </li> </ul> <p>Note: For detailed GWAS methodology, see:</p> <ul> <li><code>ukb-a</code> and <code>ukb-d</code>: GitHub repo and Blog</li> <li><code>ukb-b</code>: GitHub repo and Documentation</li> </ul>"},{"location":"projects/#uk-biobank-pharma-proteomics-project-ukb-ppp","title":"UK Biobank Pharma Proteomics Project (UKB-PPP)","text":"<p>UK Biobank Pharma Proteomics Project (UKB-PPP) is a biopharmaceutical consortium that performed plasma proteomic profiling of 54,219 UK Biobank participants. Protein quantitative trait loci (pQTL) analyses were conducted across European individuals and five additional non-European ancestry groups.</p> <p>GWASStudio includes a total of 20,576 UKB-PPP GWAS summary statistics.</p> <p>For more information on the UKB-PPP project, see the original UKB-PPP article.</p>"},{"location":"projects/#key-metadata_4","title":"Key Metadata","text":"<ul> <li>Number of Protein Analytes:<ul> <li>2,941 protein analytes (2,943 unique proteins)</li> </ul> </li> <li>Protein Panel:<ul> <li>Olink Explore 3072 Panel</li> </ul> </li> <li>Number of Variants:<ul> <li>~23.8 million imputed variants</li> </ul> </li> <li>Genome build:<ul> <li>GRCh38</li> </ul> </li> <li>Sample Size and Ancestry:<ul> <li><code>ukb-ppp_European</code>: 34,557 European individuals</li> <li><code>ukb-ppp_African</code>: 931 African individuals</li> <li><code>ukb-ppp_South_Asian</code>: 920 Central South Asian individuals</li> <li><code>ukb-ppp_Middle_Eastern</code>: 308 Middle Eastern individuals</li> <li><code>ukb-ppp_East_Asian</code>: 262 East Asian individuals</li> <li><code>ukb-ppp_American</code>: 97 Admixed American (mostly Hispanic/Latino groups)</li> <li><code>ukb-ppp_Combined</code>: 52,363 individuals in total \u2014 the combined UKB-PPP cohort includes all above groups plus 17,806 additional European individuals from the replication cohort. The combined cohort results from QC filtering starting from 54,219 initial participants selected by the UKB-PPP consortium</li> </ul> </li> <li>GWAS Method<ul> <li>regenie v2.2.1</li> </ul> </li> </ul> <p>Note: Ancestry groups in UKB-PPP are defined following the pan-UKBB framework, based on clustering individuals in principal component (PC) space using reference populations from the 1000 Genomes Project and the Human Genome Diversity Panel. For more information, see the pan-UKBB study design.</p> <p>Note: For detailed GWAS methodology, see the original UKB-PPP article.</p>"}]}